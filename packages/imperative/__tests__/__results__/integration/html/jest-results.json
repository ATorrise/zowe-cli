{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 71,
  "numPassedTests": 434,
  "numPendingTestSuites": 1,
  "numPendingTests": 1,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 72,
  "numTotalTests": 435,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 121,
    "total": 121,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1688064900102,
  "success": true,
  "testResults": [
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 16,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688064981150,
        "runtime": 80871,
        "slow": true,
        "start": 1688064900279
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 16,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\test\\cli.imperative-test-cli.test.logging.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "default levels",
            "imperative logger"
          ],
          "duration": 4348,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command default levels imperative logger should default to WARN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should default to WARN"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "default levels",
            "app logger"
          ],
          "duration": 4116,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command default levels app logger should default to WARN",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should default to WARN"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "error & invalid value handling",
            "imperative logger"
          ],
          "duration": 4111,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command error & invalid value handling imperative logger should default to WARN if a blank is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should default to WARN if a blank is specified"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "error & invalid value handling",
            "imperative logger"
          ],
          "duration": 4181,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command error & invalid value handling imperative logger should default to WARN if an invalid level is specified and also warn user with the error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should default to WARN if an invalid level is specified and also warn user with the error"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "error & invalid value handling",
            "app logger"
          ],
          "duration": 4152,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command error & invalid value handling app logger should default to WARN if a blank is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should default to WARN if a blank is specified"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "error & invalid value handling",
            "app logger"
          ],
          "duration": 4186,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command error & invalid value handling app logger should default to WARN if an invalid level is specified and also warn user with the error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should default to WARN if an invalid level is specified and also warn user with the error"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "imperative logger"
          ],
          "duration": 4132,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging imperative logger should only produce NO log messages if the level is OFF",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should only produce NO log messages if the level is OFF"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "imperative logger"
          ],
          "duration": 4209,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging imperative logger should produce all message levels if TRACE is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce all message levels if TRACE is specified"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "app logger"
          ],
          "duration": 4215,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging app logger should only produce NO log messages if the level is OFF",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should only produce NO log messages if the level is OFF"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "app logger"
          ],
          "duration": 4114,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging app logger should produce all message levels if TRACE is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce all message levels if TRACE is specified"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "all loggers"
          ],
          "duration": 4184,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging all loggers should only produce NO log messages if the level is OFF",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should only produce NO log messages if the level is OFF"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "all loggers"
          ],
          "duration": 4134,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging all loggers should produce all message levels if TRACE is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce all message levels if TRACE is specified"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "all loggers"
          ],
          "duration": 4158,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging all loggers should produce the correct levels if app is INFO and imperative is ERROR",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce the correct levels if app is INFO and imperative is ERROR"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "all loggers"
          ],
          "duration": 4167,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging all loggers should produce only INFO, WARN, ERROR, & FATAL if INFO is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce only INFO, WARN, ERROR, & FATAL if INFO is specified"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "all loggers"
          ],
          "duration": 4372,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging all loggers should produce all for IMP if TRACE and none for APP if OFF",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce all for IMP if TRACE and none for APP if OFF"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test logging command",
            "logging",
            "all loggers"
          ],
          "duration": 4510,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test logging command logging all loggers should produce all for APP if TRACE and none for IMP if OFF",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce all for APP if TRACE and none for IMP if OFF"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 46,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688064984866,
        "runtime": 3672,
        "slow": false,
        "start": 1688064981194
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\cmd\\__integration__\\SyntaxValidator.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 188,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command We should be able to correctly specify the options for our test command without an error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "We should be able to correctly specify the options for our test command without an error"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 16,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an unknown positional, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an unknown positional, the command should fail"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify multiple unknown positionals, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify multiple unknown positionals, the command should fail"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we omit a required boolean option, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we omit a required boolean option, the command should fail"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we omit a required string option, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we omit a required string option, the command should fail"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify the --name of a required string option, but no value, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify the --name of a required string option, but no value, the command should fail"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify a conflicting option, the command should fail.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify a conflicting option, the command should fail."
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option that implies another option, but omit the implied option, the command should fail. ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option that implies another option, but omit the implied option, the command should fail. "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option that implies another option, and include the implied option, the command should succeed. ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option that implies another option, and include the implied option, the command should succeed. "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option that has a set of allowable string values, but specify a value that doesn't match any of the values, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option that has a set of allowable string values, but specify a value that doesn't match any of the values, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 27,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option that has a set of allowable string values, but specify a value that partially match one of the values, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option that has a set of allowable string values, but specify a value that partially match one of the values, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 29,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option that has a set of allowable string values, but specify a value that is the regular expression itself, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option that has a set of allowable string values, but specify a value that is the regular expression itself, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 23,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option that has a set of allowable string values, and specify a value that matches one of the allowable values, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option that has a set of allowable string values, and specify a value that matches one of the allowable values, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option whose type is array and which has a set of allowable string values, and specify multiple values each of which matches one of the allowable values, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option whose type is array and which has a set of allowable string values, and specify multiple values each of which matches one of the allowable values, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option whose type is array and which has a set of allowable string values, and specify multiple values one of which doesn't match one of the allowable values, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option whose type is array and which has a set of allowable string values, and specify multiple values one of which doesn't match one of the allowable values, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we don't specify an option, and the absence of that option implies the presence of another option, and we omit that option as well, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we don't specify an option, and the absence of that option implies the presence of another option, and we omit that option as well, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we don't specify an option, and the absence of that option implies the presence of another option, but we specify that implied option, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we don't specify an option, and the absence of that option implies the presence of another option, but we specify that implied option, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option that should be numerical, but a non-numeric option is specified, the command should fail  ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option that should be numerical, but a non-numeric option is specified, the command should fail  "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option that should be numerical, and we specify a number, the command should succeed  ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option that should be numerical, and we specify a number, the command should succeed  "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option for which specifying a certain value implies another option, if we omit the implied option, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option for which specifying a certain value implies another option, if we omit the implied option, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option for which specifying a certain value implies another option, if we specify the implied option, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option for which specifying a certain value implies another option, if we specify the implied option, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's one character long, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's one character long, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's exactly two characters long, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's exactly two characters long, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's exactly eight characters long, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's exactly eight characters long, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's nine characters long, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max length of eight characters and a minimum of two,  and we specify a value that's nine characters long, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max value of 12 and a minimum of 1,  and we specify 0, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max value of 12 and a minimum of 1,  and we specify 0, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max value of 12 and a minimum of 1,  and we specify 1, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max value of 12 and a minimum of 1,  and we specify 1, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max value of 12 and a minimum of 1,  and we specify 1 long, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max value of 12 and a minimum of 1,  and we specify 1 long, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with a max value of 12 and a minimum of 1,  and we specify 15, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with a max value of 12 and a minimum of 1,  and we specify 15, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option whose type is array and do not specify arrayAllowDuplicate, and specify an array containing duplicate values, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option whose type is array and do not specify arrayAllowDuplicate, and specify an array containing duplicate values, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option whose type is array and arrayAllowDuplicate is true, and specify an array containing duplicate values, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option whose type is array and arrayAllowDuplicate is true, and specify an array containing duplicate values, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option whose type is array and arrayAllowDuplicate is false, and specify an array containing duplicate values, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option whose type is array and arrayAllowDuplicate is false, and specify an array containing duplicate values, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option whose type is array and arrayAllowDuplicate is false, and specify an array containing multiple duplicate values, the command should fail and the error message contains all duplicate values ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option whose type is array and arrayAllowDuplicate is false, and specify an array containing multiple duplicate values, the command should fail and the error message contains all duplicate values "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify an option whose type is array and arrayAllowDuplicate is false, and specify an array containing no duplicate values, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify an option whose type is array and arrayAllowDuplicate is false, and specify an array containing no duplicate values, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option that implies at least one of a set of other options, if we specify that option but omit all of the implications, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option that implies at least one of a set of other options, if we specify that option but omit all of the implications, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option that implies at least one of a set of other options, if we specify that option and satisfy the implication, the command should succeed ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option that implies at least one of a set of other options, if we specify that option and satisfy the implication, the command should succeed "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with multiple conflicts, if we specify the first of the conflicting options, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with multiple conflicts, if we specify the first of the conflicting options, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with multiple conflicts, if we specify two of the conflicting options, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with multiple conflicts, if we specify two of the conflicting options, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with multiple conflicts, if we specify all of the conflicting options, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with multiple conflicts, if we specify all of the conflicting options, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If there is an option with multiple conflicts, if we specify the last of the conflicting options, the command should fail ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If there is an option with multiple conflicts, if we specify the last of the conflicting options, the command should fail "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command"
          ],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command If we specify a string type option multiple times,  but  otherwise have a correct command ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify a string type option multiple times,  but  otherwise have a correct command "
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command",
            "We should be able to validate array positional arguments"
          ],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command We should be able to validate array positional arguments If we have a command with a required string array type argument, we should successfully validate when we specify a value for the array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we have a command with a required string array type argument, we should successfully validate when we specify a value for the array"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command",
            "We should be able to validate array positional arguments"
          ],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command We should be able to validate array positional arguments If we have a command with a required string array type argument, we should fail to validate when we specify no value for the array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we have a command with a required string array type argument, we should fail to validate when we specify no value for the array"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command",
            "We should be able to validate positional arguments of type 'number'"
          ],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command We should be able to validate positional arguments of type 'number' If we have a command with a number-type positional, and we try to specify a non-numeric argument, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we have a command with a number-type positional, and we try to specify a non-numeric argument, the command should fail"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command",
            "We should be able to validate positional arguments of type 'number'"
          ],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command We should be able to validate positional arguments of type 'number' If we have a command with a number-type positional, and we try to specify a numeric argument, the command should succeed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we have a command with a number-type positional, and we try to specify a numeric argument, the command should succeed"
        },
        {
          "ancestorTitles": [
            "Imperative should provide advanced syntax validation rules",
            "Advanced syntax validation for commands using a test command",
            "We should be able to validate positional arguments of type 'number'"
          ],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should provide advanced syntax validation rules Advanced syntax validation for commands using a test command We should be able to validate positional arguments of type 'number' If we have a command with a number-type positional, and we try to specify 0, the command should succeed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we have a command with a number-type positional, and we try to specify 0, the command should succeed"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 6,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688065173882,
        "runtime": 188975,
        "slow": true,
        "start": 1688064984907
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\report-env\\cli.imperative-test-cli.config.report-env.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config report-env",
            "success scenarios"
          ],
          "duration": 4292,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config report-env success scenarios should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config report-env",
            "success scenarios"
          ],
          "duration": 35991,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config report-env success scenarios should successfully produce a report",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully produce a report"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config report-env",
            "success scenarios"
          ],
          "duration": 36220,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config report-env success scenarios should set up environment with file and successfully produce a report - home directory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should set up environment with file and successfully produce a report - home directory"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config report-env",
            "success scenarios"
          ],
          "duration": 37514,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config report-env success scenarios should set up environment with file and successfully produce a report - cli directory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should set up environment with file and successfully produce a report - cli directory"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config report-env",
            "success scenarios"
          ],
          "duration": 37272,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config report-env success scenarios should set up environment with file and successfully produce a report - both directories",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should set up environment with file and successfully produce a report - both directories"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config report-env",
            "success scenarios"
          ],
          "duration": 36748,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config report-env success scenarios should set up bad environment with file and successfully produce a report",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should set up bad environment with file and successfully produce a report"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 17,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688065302754,
        "runtime": 128840,
        "slow": true,
        "start": 1688065173914
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\import\\cli.imperative-test-cli.config.import.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios"
          ],
          "duration": 5724,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios"
          ],
          "duration": 10398,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios should successfully import and overwrite a config and schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully import and overwrite a config and schema"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios",
            "from the web"
          ],
          "duration": 6545,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios from the web should successfully import a config from a URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully import a config from a URL"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios",
            "from the web"
          ],
          "duration": 6183,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios from the web should successfully import a config and schema from a URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully import a config and schema from a URL"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios",
            "from the web"
          ],
          "duration": 6540,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios from the web should successfully import a config without schema if it is defined with a URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully import a config without schema if it is defined with a URL"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios",
            "from the disk"
          ],
          "duration": 6615,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios from the disk should successfully import a config from a file",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully import a config from a file"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios",
            "from the disk"
          ],
          "duration": 7044,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios from the disk should successfully import a config and schema from a file",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully import a config and schema from a file"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "success scenarios",
            "from the disk"
          ],
          "duration": 8000,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import success scenarios from the disk should successfully import a config without schema if it is defined with an absolute path",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully import a config without schema if it is defined with an absolute path"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios"
          ],
          "duration": 7507,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios should fail to import if location is not specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import if location is not specified"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios"
          ],
          "duration": 11866,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios should fail to import a schema and config if they already exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a schema and config if they already exist"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios",
            "from the web"
          ],
          "duration": 7472,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios from the web should fail to import a config from a bad URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a config from a bad URL"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios",
            "from the web"
          ],
          "duration": 6721,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios from the web should fail to import a schema from a bad URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a schema from a bad URL"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios",
            "from the web"
          ],
          "duration": 6766,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios from the web should fail to import a config that is invalid JSON from a URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a config that is invalid JSON from a URL"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios",
            "from the web"
          ],
          "duration": 6746,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios from the web should fail to import a schema that is invalid JSON from a URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a schema that is invalid JSON from a URL"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios",
            "from the disk"
          ],
          "duration": 6468,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios from the disk should fail to import a config from a bad path",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a config from a bad path"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios",
            "from the disk"
          ],
          "duration": 6338,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios from the disk should fail to import a schema from a bad path",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a schema from a bad path"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config import",
            "failure scenarios",
            "from the disk"
          ],
          "duration": 6621,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config import failure scenarios from the disk should fail to import a config that is invalid JSON from a path",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to import a config that is invalid JSON from a path"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 11,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688065462128,
        "runtime": 159344,
        "slow": true,
        "start": 1688065302784
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\set\\cli.imperative-test-cli.config.set.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config set"
          ],
          "duration": 5206,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set"
          ],
          "duration": 10599,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set should store a property in plain text",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should store a property in plain text"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set"
          ],
          "duration": 10438,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set should prompt for and store a property in plain text",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should prompt for and store a property in plain text"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 14681,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should make the info property secure in the project config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should make the info property secure in the project config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 14893,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should make the info property secure in the user config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should make the info property secure in the user config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 21215,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should make the info property secure in the global project config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should make the info property secure in the global project config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 20438,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should make the info property secure in the global user config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should make the info property secure in the global user config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 15588,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should supply secured JSON to the info property in the global user config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should supply secured JSON to the info property in the global user config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 10526,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should fail to parse improperly formatted JSON objects",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to parse improperly formatted JSON objects"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 11755,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should store property securely without --secure flag if found in secure array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should store property securely without --secure flag if found in secure array"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config set",
            "secure"
          ],
          "duration": 22940,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config set secure should toggle the security of a property if requested",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should toggle the security of a property if requested"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 13,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688065710933,
        "runtime": 248773,
        "slow": true,
        "start": 1688065462160
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 4,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\profiles\\__integration__\\CliProfileManager.credentials.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Generic Success Scenarios"
          ],
          "duration": 176706,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Generic Success Scenarios should create and load a profile with saved credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create and load a profile with saved credentials"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Generic Success Scenarios"
          ],
          "duration": 4316,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Generic Success Scenarios should overwrite and load a profile with saved credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should overwrite and load a profile with saved credentials"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Generic Success Scenarios"
          ],
          "duration": 9325,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Generic Success Scenarios should update and load a profile with saved credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update and load a profile with saved credentials"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Generic Success Scenarios"
          ],
          "duration": 6504,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Generic Success Scenarios should delete a profile with saved credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete a profile with saved credentials"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Generic Success Scenarios"
          ],
          "duration": 6295,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Generic Success Scenarios should update a password",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update a password"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Generic Failure Scenarios"
          ],
          "duration": 6098,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Generic Failure Scenarios should fail if the Credential Manager is unable to find the profile",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail if the Credential Manager is unable to find the profile"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Generic Failure Scenarios"
          ],
          "duration": 7159,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Generic Failure Scenarios should fail if the Credential Manager is unable to retrieve a password",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail if the Credential Manager is unable to retrieve a password"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Missing keytar installation"
          ],
          "duration": 2230,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Missing keytar installation should fail if keytar is not loaded on profiles create",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail if keytar is not loaded on profiles create"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Missing keytar installation"
          ],
          "duration": 4173,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Missing keytar installation should fail if keytar is not loaded on using profile handler",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail if keytar is not loaded on using profile handler"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Missing keytar installation"
          ],
          "duration": 4212,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Missing keytar installation should fail if keytar is not loaded on profiles delete",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail if keytar is not loaded on profiles delete"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Default Credential Management",
            "Missing keytar installation"
          ],
          "duration": 4362,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Default Credential Management Missing keytar installation should be able to issue command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to issue command"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Custom Credential Management (Absolute String)"
          ],
          "duration": 7880,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Custom Credential Management (Absolute String) should use an overwritten credential manager (Absolute String)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should use an overwritten credential manager (Absolute String)"
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager",
            "Custom Credential Management (Class)"
          ],
          "duration": 7819,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager Custom Credential Management (Class) should use an overwritten credential manager (Class)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should use an overwritten credential manager (Class)"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 16,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688065827823,
        "runtime": 116863,
        "slow": true,
        "start": 1688065710960
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\profiles\\Cmd.cli.profile.option.mapping.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 8286,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should map profile fields to required options",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should map profile fields to required options"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 8236,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should have command line arguments take precedence over profile fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have command line arguments take precedence over profile fields"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 8036,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should have environmental variables take precedence over profile fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have environmental variables take precedence over profile fields"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 8445,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should have command line arguments take precedence over profile fields and environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have command line arguments take precedence over profile fields and environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 4945,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should have environmental variables take precedence over default values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have environmental variables take precedence over default values"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 13513,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should have service profile fields take precedence over base profile fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have service profile fields take precedence over base profile fields"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 4872,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should be able to specify positional options via environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to specify positional options via environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 9327,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should map profile fields to positional options",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should map profile fields to positional options"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 4942,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should be able to specify valid number type options via environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to specify valid number type options via environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 5249,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should get a syntax error when specifying a non-numeric value via environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should get a syntax error when specifying a non-numeric value via environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 5409,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should be able to specify valid boolean type options (true) via environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to specify valid boolean type options (true) via environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 5314,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should be able to specify valid boolean type options (false) via environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to specify valid boolean type options (false) via environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 5306,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should get a syntax error when specifying a non-boolean value via environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should get a syntax error when specifying a non-boolean value via environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 4889,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should be able to specify valid array type options via environmental variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to specify valid array type options via environmental variables"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 9478,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should not map profile fields to --name or --type",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not map profile fields to --name or --type"
        },
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 9616,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should still be able to specify --name and --type on command line",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should still be able to specify --name and --type on command line"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 14,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066032584,
        "runtime": 204730,
        "slow": true,
        "start": 1688065827854
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\example_clis\\with_profiles\\__integration__\\AutoGeneratedProfileCommands.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 43715,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we accept the default of auto-generating profile commands, commands should be generated for each profile type, and able to be invoked with --help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we accept the default of auto-generating profile commands, commands should be generated for each profile type, and able to be invoked with --help"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 4992,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we specify updateProfileExamples on our profile configuration, our examples should appear in the help text",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we specify updateProfileExamples on our profile configuration, our examples should appear in the help text"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 34907,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we turn off  auto-generating profile commands, commands should NOT be generated for each profile type",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we turn off  auto-generating profile commands, commands should NOT be generated for each profile type"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 5587,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we have a profile type defined with a dependent profile, if we specify a non-existent profile-a profile, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we have a profile type defined with a dependent profile, if we specify a non-existent profile-a profile, the command should fail"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 12585,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we have a profile type defined with a dependent profile, if we specify a valid dependent profile, the command should succeed and we should be able to use the profile on a command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we have a profile type defined with a dependent profile, if we specify a valid dependent profile, the command should succeed and we should be able to use the profile on a command"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 11517,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we create a profile-with-dependencies, and the profile-a dependency is different than the default profile-a profile, the default profile-a profile should not be loaded when the profile-with-dependencies is used on a command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we create a profile-with-dependencies, and the profile-a dependency is different than the default profile-a profile, the default profile-a profile should not be loaded when the profile-with-dependencies is used on a command"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 2590,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we omit a required option definition on a generate create profile command,defined in the profile schema, we should get a syntax error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we omit a required option definition on a generate create profile command,defined in the profile schema, we should get a syntax error"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 50795,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles We should be able to run through all auto-generated profile commands for two types of profiles",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "We should be able to run through all auto-generated profile commands for two types of profiles"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 5045,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles should not fail a command where the profile is listed as optional and not specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not fail a command where the profile is listed as optional and not specified"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 7792,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles If we update an existing profile, the contents of the old profile should be merged with teh",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we update an existing profile, the contents of the old profile should be merged with teh"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 2403,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles should contain examples specified on profile config in the help text",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should contain examples specified on profile config in the help text"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 9220,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles should be able to validate a many-field-profile with an auto generated validate command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to validate a many-field-profile with an auto generated validate command"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 5782,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles should not print output more than once if a progress bar is used in a profiles validate command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not print output more than once if a progress bar is used in a profiles validate command"
        },
        {
          "ancestorTitles": [
            "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles"
          ],
          "duration": 5975,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide auto-generated profile commands for convenience, so that Imperative-based CLIs can let users manage configuration profiles should be fail to validate an invalid many-fields-profile",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be fail to validate an invalid many-fields-profile"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 12,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066186163,
        "runtime": 153519,
        "slow": true,
        "start": 1688066032644
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\auth\\Cmd.cli.auth.login.fruit.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 15192,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should load values from base profile and store token in it with alias",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and store token in it with alias"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 14784,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should load values from base profile and store token in it - basic auth",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and store token in it - basic auth"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 13546,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should load values from base profile and store token in it - certificate auth",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and store token in it - certificate auth"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 14549,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should load values from base profile and show token only - basic auth",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and show token only - basic auth"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 14418,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should load values from base profile and show token only - certificate auth",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and show token only - certificate auth"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 15059,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should load values from base profile and show token in rfj - basic auth",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and show token in rfj - basic auth"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 14472,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should load values from base profile and show token in rfj - certificate auth",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and show token in rfj - certificate auth"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 9804,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should create a profile, if requested 1",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a profile, if requested 1"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 9845,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should create a profile, if requested 2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a profile, if requested 2"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 10713,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should create a profile, if requested 3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a profile, if requested 3"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 10479,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should not create a profile, if requested 1",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not create a profile, if requested 1"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth login"
          ],
          "duration": 9276,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth login should not create a profile, if requested 2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not create a profile, if requested 2"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 11,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066275335,
        "runtime": 89141,
        "slow": true,
        "start": 1688066186194
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\auto-init\\imperative.test.cli.config.auto-init.fruit.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 6010,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should initialize project config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize project config"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 5985,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should initialize project user config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize project user config"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 5854,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should initialize global config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize global config"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 5904,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should initialize global user config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize global user config"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 6058,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should prompt for missing host",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should prompt for missing host"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 6170,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should prompt for missing user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should prompt for missing user"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 5915,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should authenticate with token if provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should authenticate with token if provided"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 5813,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should not update file on disk in dry-run mode",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not update file on disk in dry-run mode"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 13574,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should merge with existing config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should merge with existing config"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 13349,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should not overwrite file without confirmation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not overwrite file without confirmation"
        },
        {
          "ancestorTitles": [
            "cmd-cli config auto-init"
          ],
          "duration": 13504,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli config auto-init should overwrite file when confirmation is given",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should overwrite file when confirmation is given"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 9,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066456967,
        "runtime": 181607,
        "slow": true,
        "start": 1688066275360
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\auth\\imperative.test.cli.auth.login.fruit.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 21047,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should load values from base profile and store token in it 1",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and store token in it 1"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 21065,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should load values from base profile and store token in it 2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and store token in it 2"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 24877,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should load values from base profile and store token in it 3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and store token in it 3"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 24795,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should load values from base profile and store token in it 4",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and store token in it 4"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 21557,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should load values from base profile and show token only",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and show token only"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 23323,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should load values from base profile and show token in rfj",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should load values from base profile and show token in rfj"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 15649,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should create a profile, if requested 1",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a profile, if requested 1"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 13897,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should create a profile, if requested 2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a profile, if requested 2"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth login",
            "single profile"
          ],
          "duration": 14502,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth login single profile should not create a profile, if requested",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not create a profile, if requested"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 9,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066508424,
        "runtime": 51426,
        "slow": true,
        "start": 1688066456998
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\init\\cli.imperative-test-cli.config.init.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5333,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5864,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a project config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a project config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5568,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a user project config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a user project config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5452,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a global config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a global config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5277,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a user global config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a user global config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5909,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a project config with prompting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a project config with prompting"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5723,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a user project config with prompting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a user project config with prompting"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5662,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a global config with prompting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a global config with prompting"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config init"
          ],
          "duration": 5564,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config init should initialize a user global config with prompting",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize a user global config with prompting"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066510183,
        "runtime": 1730,
        "slow": false,
        "start": 1688066508453
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\packages\\operations\\__tests__\\__integration__\\Operations.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Operation Infrastructure"
          ],
          "duration": 41,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Operation Infrastructure Operations: Test a simple set of operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "Operations: Test a simple set of operations"
        },
        {
          "ancestorTitles": [
            "Operation Infrastructure"
          ],
          "duration": 50,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Operation Infrastructure Operations: Test for complex set of operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "Operations: Test for complex set of operations"
        },
        {
          "ancestorTitles": [
            "Operation Infrastructure"
          ],
          "duration": 73,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Operation Infrastructure Operations: Test for complex set of undo operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "Operations: Test for complex set of undo operations"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 10,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066582268,
        "runtime": 72047,
        "slow": true,
        "start": 1688066510221
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 5,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\list\\cli.imperative-test-cli.config.list.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4161,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4767,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the configuration",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the configuration"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4559,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the configuration in RFJ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the configuration in RFJ"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4508,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the configurations based on location",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the configurations based on location"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4470,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the configurations based on location in RFJ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the configurations based on location in RFJ"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4454,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the root level property names only",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the root level property names only"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4635,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should get a list of config file paths",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should get a list of config file paths"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4571,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the profiles configuration property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the profiles configuration property"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 4446,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the defaults configuration property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the defaults configuration property"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config list"
          ],
          "duration": 11146,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config list should list the configuration without showing secure values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list the configuration without showing secure values"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 6,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066671761,
        "runtime": 89463,
        "slow": true,
        "start": 1688066582298
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\secure\\cli.imperative-test-cli.config.secure.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config secure"
          ],
          "duration": 5001,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config secure should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config secure"
          ],
          "duration": 14842,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config secure should secure the project config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should secure the project config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config secure"
          ],
          "duration": 16043,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config secure should secure the user config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should secure the user config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config secure"
          ],
          "duration": 17375,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config secure should secure the global project config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should secure the global project config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config secure"
          ],
          "duration": 15301,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config secure should secure the global user config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should secure the global user config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config secure"
          ],
          "duration": 19994,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config secure should prompt for user and password to obtain auth token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should prompt for user and password to obtain auth token"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 8,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066761950,
        "runtime": 90163,
        "slow": true,
        "start": 1688066671787
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\update-schemas\\cli.imperative-test-cli.config.update-schemas.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 5060,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 5561,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should not update schemas if we could not find any",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not update schemas if we could not find any"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 9906,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should update project config schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update project config schema"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 10098,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should update user config schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update user config schema"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 10042,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should update global config schemas",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update global config schemas"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 9781,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should update global user config schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update global user config schema"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 24335,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should update all four layers of schemas",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update all four layers of schemas"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config update-schemas"
          ],
          "duration": 14491,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config update-schemas should update only local schemas",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update only local schemas"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 11,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066814872,
        "runtime": 52894,
        "slow": true,
        "start": 1688066761978
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 11,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invoke\\Cmd.cli.invoke.test-handler.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 8130,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4348,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fulfill the promise and complete the command successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fulfill the promise and complete the command successfully"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4339,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fulfill the promise and complete the command successfully with a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fulfill the promise and complete the command successfully with a JSON response"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4249,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fail the command if fail-with-message is specified and no message is supplied",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail the command if fail-with-message is specified and no message is supplied"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4188,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fail the command if fail-with-message is specified with a message",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail the command if fail-with-message is specified with a message"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4310,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fail the command if fail-with-message is specified with a message and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail the command if fail-with-message is specified with a message and produce a JSON response"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4391,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fail a handler if a generic error is thrown",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail a handler if a generic error is thrown"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4743,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fail a handler if a generic error is thrown and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail a handler if a generic error is thrown and produce a JSON response"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4435,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fail a handler if an imperative error is thrown",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail a handler if an imperative error is thrown"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4479,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should fail a handler if an imperative error is thrown and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail a handler if an imperative error is thrown and produce a JSON response"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-handler"
          ],
          "duration": 4369,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-handler should invoke the handler and print a message if no options are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should invoke the handler and print a message if no options are specified"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066963857,
        "runtime": 148946,
        "slow": true,
        "start": 1688066814911
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\convert-profiles\\cli.imperative-test-cli.config.convert-profiles.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles",
            "success scenarios"
          ],
          "duration": 24435,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles success scenarios should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles",
            "success scenarios"
          ],
          "duration": 25586,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles success scenarios should convert profiles to team config",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should convert profiles to team config"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles"
          ],
          "duration": 36782,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles should convert v1 profile property names to v2 names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should convert v1 profile property names to v2 names"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles",
            "failure scenarios"
          ],
          "duration": 24674,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles failure scenarios should not convert profiles if prompt is rejected",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not convert profiles if prompt is rejected"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles",
            "failure scenarios"
          ],
          "duration": 36497,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles failure scenarios should not delete profiles if prompt is rejected",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not delete profiles if prompt is rejected"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688066966358,
        "runtime": 2477,
        "slow": false,
        "start": 1688066963881
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\cmd\\__integration__\\CliProfileManager.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Cli Profile Manager"
          ],
          "duration": 463,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager should take a handler to create a profile from command line arguments, and the handler should be called and the resulting profile should have the created fields in it.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should take a handler to create a profile from command line arguments, and the handler should be called and the resulting profile should have the created fields in it."
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager"
          ],
          "duration": 250,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager If we provide a non existent handler to create a profile from command line arguments, we should get a helpful error.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we provide a non existent handler to create a profile from command line arguments, we should get a helpful error."
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager"
          ],
          "duration": 290,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager should take a handler to update a profile that has already been created, call the handler and update the profile from arguments.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should take a handler to update a profile that has already been created, call the handler and update the profile from arguments."
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager"
          ],
          "duration": 237,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager If we provide a non existent handler to update a profile from command line arguments, we should get a helpful error.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we provide a non existent handler to update a profile from command line arguments, we should get a helpful error."
        },
        {
          "ancestorTitles": [
            "Cli Profile Manager"
          ],
          "duration": 250,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Cli Profile Manager should be able to automatically map command line options to profile fields without a handler for a simple single layer profile schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to automatically map command line options to profile fields without a handler for a simple single layer profile schema"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067127930,
        "runtime": 161545,
        "slow": true,
        "start": 1688066966385
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\auth\\imperative.test.cli.auth.logout.fruit.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli auth logout"
          ],
          "duration": 30923,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth logout should have auth logout command that loads values from base profile and removes the token 1",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that loads values from base profile and removes the token 1"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth logout"
          ],
          "duration": 31945,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth logout should have auth logout command that loads values from base profile and removes the token 2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that loads values from base profile and removes the token 2"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth logout"
          ],
          "duration": 32904,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth logout should have auth logout command that loads values from base profile and removes the token 3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that loads values from base profile and removes the token 3"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth logout"
          ],
          "duration": 35825,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth logout should have auth logout command that loads values from base profile and removes the token 4",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that loads values from base profile and removes the token 4"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli auth logout"
          ],
          "duration": 29026,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli auth logout should have auth logout command that invalidates another token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that invalidates another token"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 9,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067162493,
        "runtime": 34536,
        "slow": true,
        "start": 1688067127957
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\chained\\Cmd.cli.chainedhandlers.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 161,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should not allow us to configure chained handlers that map arguments to indices beyond the end of the list of chained handlers (edge case - one beyond the length of the array)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not allow us to configure chained handlers that map arguments to indices beyond the end of the list of chained handlers (edge case - one beyond the length of the array)"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4163,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should be able to chain three different handlers together and get all output",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to chain three different handlers together and get all output"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4233,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should produce valid json for chained handlers if --response-format-json is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce valid json for chained handlers if --response-format-json is specified"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4133,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should be able to chain three different handlers together, but not print output for commands marked silent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to chain three different handlers together, but not print output for commands marked silent"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4207,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should fail if a non optional response object mapping fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail if a non optional response object mapping fail"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4152,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should succeed if an optional mapping fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should succeed if an optional mapping fails"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4209,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should throw an error if a non-existent mapping access fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if a non-existent mapping access fails"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4265,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should throw an error if a handler throws an error, and future handlers are not invoked",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if a handler throws an error, and future handlers are not invoked"
        },
        {
          "ancestorTitles": [
            "cmd-cli chained handlers"
          ],
          "duration": 4156,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli chained handlers should properly map arguments in a command with many handlers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should properly map arguments in a command with many handlers"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 6,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067166846,
        "runtime": 4321,
        "slow": false,
        "start": 1688067162525
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 2,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\profiles\\__integration__\\BasicProfileManager.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Imperative should allow CLI implementations to configure their own profiles and types"
          ],
          "duration": 599,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should allow CLI implementations to configure their own profiles and types should be able to create a profile type and retrieve all defined types after init",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to create a profile type and retrieve all defined types after init"
        },
        {
          "ancestorTitles": [
            "Imperative should allow CLI implementations to configure their own profiles and types"
          ],
          "duration": 548,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should allow CLI implementations to configure their own profiles and types should be receive a failure message when attempting to load a profile that doesn't exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be receive a failure message when attempting to load a profile that doesn't exist"
        },
        {
          "ancestorTitles": [
            "Imperative should allow CLI implementations to configure their own profiles and types"
          ],
          "duration": 574,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should allow CLI implementations to configure their own profiles and types should receive a failure message when attempting to create an ill-formed profile",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should receive a failure message when attempting to create an ill-formed profile"
        },
        {
          "ancestorTitles": [
            "Imperative should allow CLI implementations to configure their own profiles and types"
          ],
          "duration": 553,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should allow CLI implementations to configure their own profiles and types should be able to create a basic profile",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to create a basic profile"
        },
        {
          "ancestorTitles": [
            "Imperative should allow CLI implementations to configure their own profiles and types"
          ],
          "duration": 547,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should allow CLI implementations to configure their own profiles and types should be able to create a basic profile and load that profile",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to create a basic profile and load that profile"
        },
        {
          "ancestorTitles": [
            "Imperative should allow CLI implementations to configure their own profiles and types"
          ],
          "duration": 518,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should allow CLI implementations to configure their own profiles and types should be able to create a basic profile and load as the default",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to create a basic profile and load as the default"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 0,
      "numPendingTests": 1,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067167682,
        "runtime": 804,
        "slow": false,
        "start": 1688067166878
      },
      "skipped": true,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\profiles\\__integration__\\ProfileCommandExample.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Imperative should allow CLI implementations to configure their own profiles and types"
          ],
          "duration": null,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should allow CLI implementations to configure their own profiles and types We should be able to issue a command and have a profile be automatically loaded",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "pending",
          "title": "We should be able to issue a command and have a profile be automatically loaded"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067228024,
        "runtime": 60319,
        "slow": true,
        "start": 1688067167705
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\auth\\Cmd.cli.auth.logout.fruit.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli auth logout"
          ],
          "duration": 19860,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth logout should have auth logout command that loads values from base profile and removes the token with alias",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that loads values from base profile and removes the token with alias"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth logout"
          ],
          "duration": 19731,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth logout should have auth logout command that loads values from base profile and removes the token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that loads values from base profile and removes the token"
        },
        {
          "ancestorTitles": [
            "cmd-cli auth logout"
          ],
          "duration": 19946,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auth logout should have auth logout command that invalidates another token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should have auth logout command that invalidates another token"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067261537,
        "runtime": 33476,
        "slow": true,
        "start": 1688067228061
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 5,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invoke\\Cmd.cli.invoke.test-async-handler.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invoke test-async-handler"
          ],
          "duration": 7932,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-async-handler should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-async-handler"
          ],
          "duration": 7953,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-async-handler should detect if the mutually exclusive fail options are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect if the mutually exclusive fail options are specified"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-async-handler"
          ],
          "duration": 7960,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-async-handler should fail a handler if an imperative error is thrown",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail a handler if an imperative error is thrown"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-async-handler"
          ],
          "duration": 4373,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-async-handler should fail a handler if a generic error is thrown",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail a handler if a generic error is thrown"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke test-async-handler"
          ],
          "duration": 4319,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke test-async-handler should fail a handler if a generic error is thrown and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail a handler if a generic error is thrown and produce a JSON response"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067290630,
        "runtime": 29059,
        "slow": true,
        "start": 1688067261571
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\test\\cli.imperative-test-cli.test.masking.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli test masking command"
          ],
          "duration": 4614,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test masking command should mask only what is required to be masked when _APP_MASK_OUTPUT is FALSE",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should mask only what is required to be masked when _APP_MASK_OUTPUT is FALSE"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test masking command"
          ],
          "duration": 4632,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test masking command should mask only what is required to be masked when _APP_MASK_OUTPUT is FALSE with --rfj",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should mask only what is required to be masked when _APP_MASK_OUTPUT is FALSE with --rfj"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test masking command"
          ],
          "duration": 4748,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test masking command should mask only what is required to be masked when _APP_MASK_OUTPUT is NOT FALSE",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should mask only what is required to be masked when _APP_MASK_OUTPUT is NOT FALSE"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli test masking command"
          ],
          "duration": 4649,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test masking command should mask only what is required to be masked when _APP_MASK_OUTPUT is NOT FALSE with --rfj",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should mask only what is required to be masked when _APP_MASK_OUTPUT is NOT FALSE with --rfj"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067302230,
        "runtime": 11563,
        "slow": true,
        "start": 1688067290667
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\gen-help\\Cmd.cli.gen-webhelp.example-test.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli gen-webhelp example-test"
          ],
          "duration": 5174,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli gen-webhelp example-test should generate the help and display it",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should generate the help and display it"
        },
        {
          "ancestorTitles": [
            "cmd-cli gen-webhelp example-test"
          ],
          "duration": 5410,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli gen-webhelp example-test should support the --rfj option",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should support the --rfj option"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067316391,
        "runtime": 14127,
        "slow": true,
        "start": 1688067302264
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invoke\\Cmd.cli.invoke.unexpected-exception-handler.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invoke unexpected-exception-handler"
          ],
          "duration": 4272,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke unexpected-exception-handler should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke unexpected-exception-handler"
          ],
          "duration": 4246,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke unexpected-exception-handler should fail because of an unexpected exception",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail because of an unexpected exception"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke unexpected-exception-handler"
          ],
          "duration": 4402,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke unexpected-exception-handler should fail because of an unexpected exception and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail because of an unexpected exception and produce a JSON response"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067344259,
        "runtime": 27833,
        "slow": true,
        "start": 1688067316426
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\edit\\cli.imperative-test-cli.config.edit.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles",
            "success scenarios"
          ],
          "duration": 8648,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles success scenarios should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles",
            "success scenarios"
          ],
          "duration": 9710,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles success scenarios should open config file in editor specified by environment variable",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should open config file in editor specified by environment variable"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config convert-profiles",
            "failure scenarios"
          ],
          "duration": 8562,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config convert-profiles failure scenarios should not open config file that does not exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should not open config file that does not exist"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067373725,
        "runtime": 29441,
        "slow": true,
        "start": 1688067344284
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 3,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\profiles\\Cmd.cli.profiles.create.banana-profile.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli profiles create banana"
          ],
          "duration": 28560,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profiles create banana should create profiles and only list the type requested",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create profiles and only list the type requested"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 6,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067403584,
        "runtime": 29825,
        "slow": true,
        "start": 1688067373759
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 6,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\auto-format\\Cmd.cli.auto-format.object.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli auto-format object"
          ],
          "duration": 4288,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format object should use the defaults coded in the handler to prettify the object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should use the defaults coded in the handler to prettify the object"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format object"
          ],
          "duration": 4198,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format object should allow a single field to be output",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow a single field to be output"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format object"
          ],
          "duration": 4171,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format object should allow a single field to be filtered and printed as a table",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow a single field to be filtered and printed as a table"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format object"
          ],
          "duration": 4165,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format object should allow the object to be printed as a single row of a table with a header",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow the object to be printed as a single row of a table with a header"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format object"
          ],
          "duration": 4228,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format object should allow a nested property to be targeted and formatted",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow a nested property to be targeted and formatted"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format object"
          ],
          "duration": 7931,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format object should allow multiple nested properties to be extract and formatted as a table and object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow multiple nested properties to be extract and formatted as a table and object"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067425054,
        "runtime": 21444,
        "slow": true,
        "start": 1688067403610
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 5,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-data-object.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-data-object"
          ],
          "duration": 7960,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-data-object should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-data-object"
          ],
          "duration": 4227,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-data-object should display a syntax error if no parms are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a syntax error if no parms are specified"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-data-object"
          ],
          "duration": 4168,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-data-object should display a syntax error if the JSON object passed is not valid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a syntax error if the JSON object passed is not valid"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-data-object"
          ],
          "duration": 4236,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-data-object should allow us to formulate a response object with a data object and produce JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow us to formulate a response object with a data object and produce JSON"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067446562,
        "runtime": 21480,
        "slow": true,
        "start": 1688067425082
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 8,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-mixed-responses.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-mixed-responses"
          ],
          "duration": 8058,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-mixed-responses should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-mixed-responses"
          ],
          "duration": 4228,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-mixed-responses should display a syntax error if no parameters are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a syntax error if no parameters are specified"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-mixed-responses"
          ],
          "duration": 4161,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-mixed-responses should display mixed responses, logs, errors, etc.",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display mixed responses, logs, errors, etc."
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-mixed-responses"
          ],
          "duration": 4199,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-mixed-responses should display mixed responses, logs, errors, etc. and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display mixed responses, logs, errors, etc. and produce a JSON response"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067467843,
        "runtime": 21239,
        "slow": true,
        "start": 1688067446604
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 4,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-error-messages.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-error-messages"
          ],
          "duration": 7846,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-error-messages should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-error-messages"
          ],
          "duration": 4131,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-error-messages should display a syntax error if no parameters are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a syntax error if no parameters are specified"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-error-messages"
          ],
          "duration": 4112,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-error-messages should display display a few error messages and allow format strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display display a few error messages and allow format strings"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-error-messages"
          ],
          "duration": 4205,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-error-messages should display display a few error messages and allow format strings and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display display a few error messages and allow format strings and produce a JSON response"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067490766,
        "runtime": 22898,
        "slow": true,
        "start": 1688067467868
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\cmd\\__integration__\\HelpCommands.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Imperative help should be available for a range of definitions"
          ],
          "duration": 8450,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative help should be available for a range of definitions We should be able to get --help for our example CLI - no bin specified in package",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "We should be able to get --help for our example CLI - no bin specified in package"
        },
        {
          "ancestorTitles": [
            "Imperative help should be available for a range of definitions"
          ],
          "duration": 7050,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative help should be available for a range of definitions should display --version in the root help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display --version in the root help"
        },
        {
          "ancestorTitles": [
            "Imperative help should be available for a range of definitions"
          ],
          "duration": 6487,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative help should be available for a range of definitions We should be able to get --help for our example CLI - with bin in package",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "We should be able to get --help for our example CLI - with bin in package"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067512898,
        "runtime": 22095,
        "slow": true,
        "start": 1688067490803
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 4,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-log-messages.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-log-messages"
          ],
          "duration": 8132,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-log-messages should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-log-messages"
          ],
          "duration": 4542,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-log-messages should display a syntax error if no parameters are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a syntax error if no parameters are specified"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-log-messages"
          ],
          "duration": 4169,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-log-messages should display display a few log messages and allow format strings",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display display a few log messages and allow format strings"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-log-messages"
          ],
          "duration": 4300,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-log-messages should display display a few log messages and allow format strings and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display display a few log messages and allow format strings and produce a JSON response"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067534757,
        "runtime": 21831,
        "slow": true,
        "start": 1688067512926
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 5,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\auto-format\\Cmd.cli.auto-format.cmd-output.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli auto-format cmd-output"
          ],
          "duration": 4183,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format cmd-output should use the defaults coded in the handler to output a table with no header",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should use the defaults coded in the handler to output a table with no header"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format cmd-output"
          ],
          "duration": 4271,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format cmd-output should use the defaults coded in the handler to output a table with a header",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should use the defaults coded in the handler to output a table with a header"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format cmd-output"
          ],
          "duration": 4200,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format cmd-output should allow the user to format the output as a list",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow the user to format the output as a list"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format cmd-output"
          ],
          "duration": 4161,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format cmd-output should allow the user to format the output as a objects",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow the user to format the output as a objects"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format cmd-output"
          ],
          "duration": 4127,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format cmd-output should allow the user to format the output as a string",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow the user to format the output as a string"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067565969,
        "runtime": 31173,
        "slow": true,
        "start": 1688067534796
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 5,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\root\\Cmd.cli.root.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli"
          ],
          "duration": 12391,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli"
          ],
          "duration": 4539,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli should show a list of available commands",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should show a list of available commands"
        },
        {
          "ancestorTitles": [
            "cmd-cli"
          ],
          "duration": 4293,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli should flag an invalid group and give a close suggestion",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should flag an invalid group and give a close suggestion"
        },
        {
          "ancestorTitles": [
            "cmd-cli"
          ],
          "duration": 4469,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli should flag an invalid command and list valid commands",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should flag an invalid command and list valid commands"
        },
        {
          "ancestorTitles": [
            "cmd-cli"
          ],
          "duration": 4535,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli should display the version",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the version"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067586677,
        "runtime": 20677,
        "slow": true,
        "start": 1688067566000
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\auto-format\\Cmd.cli.auto-format.table.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli auto-format table"
          ],
          "duration": 4983,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format table should include the header if no option is specified because it is defaulted in the handler",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should include the header if no option is specified because it is defaulted in the handler"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format table"
          ],
          "duration": 4950,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format table should include the header if the user specifies rfh",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should include the header if the user specifies rfh"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format table"
          ],
          "duration": 4902,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format table should NOT include the header if the user specifies rfh=false",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should NOT include the header if the user specifies rfh=false"
        },
        {
          "ancestorTitles": [
            "cmd-cli auto-format table"
          ],
          "duration": 4897,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli auto-format table should allow extraction of properties within each entry of an array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow extraction of properties within each entry of an array"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067609506,
        "runtime": 22787,
        "slow": true,
        "start": 1688067586719
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 4,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-data-array.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-data-array"
          ],
          "duration": 9712,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-data-array should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-data-array"
          ],
          "duration": 6680,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-data-array should display a syntax error if no parms are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a syntax error if no parms are specified"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-data-array"
          ],
          "duration": 5412,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-data-array should construct a response object with the strings inputted and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should construct a response object with the strings inputted and produce a JSON response"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 4,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067630220,
        "runtime": 20675,
        "slow": true,
        "start": 1688067609545
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 6,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\validate\\Cmd.cli.validate.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli"
          ],
          "duration": 4973,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli should display proper messages when missing positional parameter",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display proper messages when missing positional parameter"
        },
        {
          "ancestorTitles": [
            "cmd-cli",
            "StringOrBlank type option"
          ],
          "duration": 4835,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli StringOrBlank type option should allow user to input blank as input",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow user to input blank as input"
        },
        {
          "ancestorTitles": [
            "cmd-cli",
            "StringOrBlank type option"
          ],
          "duration": 4906,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli StringOrBlank type option should allow user to input valid string as input",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow user to input valid string as input"
        },
        {
          "ancestorTitles": [
            "cmd-cli",
            "StringOrBlank type option"
          ],
          "duration": 4762,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli StringOrBlank type option should display proper help message when value is missing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display proper help message when value is missing"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067647687,
        "runtime": 17438,
        "slow": true,
        "start": 1688067630249
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\example_clis\\with_profiles\\__integration__\\ExampleLogging.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "We should provide the ability to create, manage, and use profiles, tested through an example CLI"
          ],
          "duration": 4758,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to create, manage, and use profiles, tested through an example CLI If we try to issue a 'log messages' command without the --level option, the command should fail",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we try to issue a 'log messages' command without the --level option, the command should fail"
        },
        {
          "ancestorTitles": [
            "We should provide the ability to create, manage, and use profiles, tested through an example CLI"
          ],
          "duration": 7115,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to create, manage, and use profiles, tested through an example CLI If we issue a 'log messages' command with --level info, we should not see any trace or debug messages in the log file ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we issue a 'log messages' command with --level info, we should not see any trace or debug messages in the log file "
        },
        {
          "ancestorTitles": [
            "We should provide the ability to create, manage, and use profiles, tested through an example CLI"
          ],
          "duration": 4636,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to create, manage, and use profiles, tested through an example CLI If we issue a 'log messages' command with --level trace, we should see all messages in the log file ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "If we issue a 'log messages' command with --level trace, we should see all messages in the log file "
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 5,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067677761,
        "runtime": 30038,
        "slow": true,
        "start": 1688067647723
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\example_clis\\with_experimental\\__integration__\\ExperimentalExample.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "We should provide the ability to set commands as experimental"
          ],
          "duration": 8902,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to set commands as experimental should show the text 'experimental' when listing experimental commands",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should show the text 'experimental' when listing experimental commands"
        },
        {
          "ancestorTitles": [
            "We should provide the ability to set commands as experimental"
          ],
          "duration": 4264,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to set commands as experimental should mark parent commands with all experimental children as experimental",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should mark parent commands with all experimental children as experimental"
        },
        {
          "ancestorTitles": [
            "We should provide the ability to set commands as experimental"
          ],
          "duration": 4251,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to set commands as experimental should show the configured experimental command help text under an experimental command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should show the configured experimental command help text under an experimental command"
        },
        {
          "ancestorTitles": [
            "We should provide the ability to set commands as experimental"
          ],
          "duration": 4271,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to set commands as experimental should inherit experimental setting from parent commands to child commands",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should inherit experimental setting from parent commands to child commands"
        },
        {
          "ancestorTitles": [
            "We should provide the ability to set commands as experimental"
          ],
          "duration": 7361,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to set commands as experimental should show the default experimental command help text under an experimental command if no custom text is configured",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should show the default experimental command help text under an experimental command if no custom text is configured"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067695468,
        "runtime": 17669,
        "slow": true,
        "start": 1688067677799
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 3,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-error-headers.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-error-headers"
          ],
          "duration": 8081,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-error-headers should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-error-headers"
          ],
          "duration": 4324,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-error-headers should display a few error headers and not fail the command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a few error headers and not fail the command"
        },
        {
          "ancestorTitles": [
            "cmd-cli respond with-error-headers"
          ],
          "duration": 4310,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-error-headers should display a few error headers and not fail the command and produce a JSON response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display a few error headers and not fail the command and produce a JSON response"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067696619,
        "runtime": 1123,
        "slow": false,
        "start": 1688067695496
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\api\\env\\EnvironmentalVariableSettings.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "environmental variable integration"
          ],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "environmental variable integration should be able to extract the values for the environment variables",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to extract the values for the environment variables"
        },
        {
          "ancestorTitles": [
            "environmental variable integration"
          ],
          "duration": 318,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "environmental variable integration should set the log levels based on the imperative prefix",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should set the log levels based on the imperative prefix"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688067724660,
        "runtime": 28016,
        "slow": true,
        "start": 1688067696644
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\profiles\\cli.imperative-test-cli.config.profiles.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config profiles"
          ],
          "duration": 4108,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config profiles should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config profiles"
          ],
          "duration": 4912,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config profiles should list profiles",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list profiles"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 75,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068808602,
        "runtime": 1083903,
        "slow": true,
        "start": 1688067724699
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\imperative\\__integration__\\PluginManagementFacility.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 22297,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should install a plugin from a file location - no space in path",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should install a plugin from a file location - no space in path"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 12718,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should fail when a credMgr override plugin has no pluginLifeCycle property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail when a credMgr override plugin has no pluginLifeCycle property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 12548,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should fail to override credential manager with unknown credMgr",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to override credential manager with unknown credMgr"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 12503,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should fail when a credMgr override plugin has no postInstall function",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail when a credMgr override plugin has no postInstall function"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 14616,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should successfully override the credMgr with a valid override plugin",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully override the credMgr with a valid override plugin"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 19753,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should install multiple plugins at the same time",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should install multiple plugins at the same time"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 30458,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should re-install plugins using files in the cli home directory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should re-install plugins using files in the cli home directory"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins"
          ],
          "duration": 14483,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins should install a plugin from a file location that contain space in it path",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should install a plugin from a file location that contain space in it path"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins",
            "Injection Tests"
          ],
          "duration": 13013,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins Injection Tests should fail to install a plugin from a file location with a command in it 1",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to install a plugin from a file location with a command in it 1"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins",
            "Injection Tests"
          ],
          "duration": 3307,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins Injection Tests should fail to install a plugin from a file location with a command in it 2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to install a plugin from a file location with a command in it 2"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins",
            "Injection Tests"
          ],
          "duration": 3048,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins Injection Tests should fail to install a plugin from a file location with a command in it 3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to install a plugin from a file location with a command in it 3"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins",
            "providing a plugin json"
          ],
          "duration": 21105,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins providing a plugin json should install using the created plugin json file",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should install using the created plugin json file"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins",
            "providing a plugin json"
          ],
          "duration": 37564,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins providing a plugin json should merge a plugins.json provided with one that is already managed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should merge a plugins.json provided with one that is already managed"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins",
            "providing a plugin json"
          ],
          "duration": 3110,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins providing a plugin json should error when a package and --file is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should error when a package and --file is specified"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Installing Plugins",
            "providing a plugin json"
          ],
          "duration": 2410,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Installing Plugins providing a plugin json should error when --file and --registry are specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should error when --file and --registry are specified"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should validate successfully"
          ],
          "duration": 15196,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should validate successfully when all plugin installed successfully and no plugin name is provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when all plugin installed successfully and no plugin name is provided"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should validate successfully"
          ],
          "duration": 12872,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should validate successfully when plugin contain space in path is installed sucessfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when plugin contain space in path is installed sucessfully"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should validate successfully"
          ],
          "duration": 12343,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should validate successfully when provided plugin name is installed successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when provided plugin name is installed successfully"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should validate successfully"
          ],
          "duration": 12928,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should validate successfully when imperative object in package.json does not contains a name property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when imperative object in package.json does not contains a name property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should validate successfully"
          ],
          "duration": 13724,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should validate successfully when imperative object in package.json does not contains a handler property but contains a chained handler",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when imperative object in package.json does not contains a handler property but contains a chained handler"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message"
          ],
          "duration": 2000,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when no plugin is installed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when no plugin is installed"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message"
          ],
          "duration": 14052,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when the provided plugin is not installed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when the provided plugin is not installed"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message"
          ],
          "duration": 12586,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when the provided plugin is not installed - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "when the provided plugin is not installed - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 12440,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios duplicated command name with base CLI commands",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "duplicated command name with base CLI commands"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 12837,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios duplicated command name with base CLI commands - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "duplicated command name with base CLI commands - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 17669,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios duplicated command name with installed plugin",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "duplicated command name with installed plugin"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 18351,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios duplicated command name with installed plugin - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "duplicated command name with installed plugin - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 14813,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing pluginHealthCheck property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing pluginHealthCheck property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 13075,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing pluginHealthCheck property - warning",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing pluginHealthCheck property - warning"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 12700,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing pluginHealthCheck handler",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing pluginHealthCheck handler"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 12493,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing pluginHealthCheck handler - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing pluginHealthCheck handler - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 12539,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing peerDependencies properties",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing peerDependencies properties"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 12458,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing peerDependencies properties - warning",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing peerDependencies properties - warning"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 13054,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing rootCommandDescription property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing rootCommandDescription property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios"
          ],
          "duration": 13123,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios missing rootCommandDescription property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "missing rootCommandDescription property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 14795,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is missing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is missing"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 12863,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is missing - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is missing - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 14927,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with empty array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with empty array"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 14475,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with empty array - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with empty array - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13331,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain name property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain name property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13601,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain name property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain name property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 14901,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain description property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain description property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 14097,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain description property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain description property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13490,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain type property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain type property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13579,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain type property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain type property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13544,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain handler property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain handler property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 15084,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain handler property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain handler property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 16552,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain handler in chained handler property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain handler in chained handler property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13768,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain handler in chained handler property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain handler in chained handler property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13196,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain anything in chained handler property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain anything in chained handler property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13334,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which does not contain anything in chained handler property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which does not contain anything in chained handler property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13185,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which has a bad handler path in chained handler property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which has a bad handler path in chained handler property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13416,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which has a bad handler path in chained handler property - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which has a bad handler path in chained handler property - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 12850,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which contains group type and missing children",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which contains group type and missing children"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13366,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which contains group type and missing children - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which contains group type and missing children - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 13686,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which contains invalid handler",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which contains invalid handler"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "definitions property"
          ],
          "duration": 16064,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios definitions property is defined with definition which contains invalid handler - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "is defined with definition which contains invalid handler - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "Detect profile problems"
          ],
          "duration": 13763,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios Detect profile problems should fail with duplicate profiles within a plugin",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail with duplicate profiles within a plugin"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "Detect profile problems"
          ],
          "duration": 13422,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios Detect profile problems should fail with duplicate profiles within a plugin - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail with duplicate profiles within a plugin - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "Detect profile problems"
          ],
          "duration": 13885,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios Detect profile problems should fail when a plugin contains a profile with the same name as the CLI",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail when a plugin contains a profile with the same name as the CLI"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Validate plugin",
            "should display proper error message",
            "when package json contains the following scenarios",
            "Detect profile problems"
          ],
          "duration": 12723,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Validate plugin should display proper error message when package json contains the following scenarios Detect profile problems should fail when a plugin contains a profile with the same name as the CLI - error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail when a plugin contains a profile with the same name as the CLI - error"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Using a Plugin"
          ],
          "duration": 25201,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Using a Plugin should create plugin commands from in-line JSON text",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create plugin commands from in-line JSON text"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Using a Plugin"
          ],
          "duration": 29854,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Using a Plugin should create plugin commands and profiles from config modules",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create plugin commands and profiles from config modules"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Using a Plugin"
          ],
          "duration": 25956,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Using a Plugin should use plugins to verify access of Imperative features",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should use plugins to verify access of Imperative features"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Using a Plugin"
          ],
          "duration": 18481,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Using a Plugin should override CredentialManager",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should override CredentialManager"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Uninstall plugin"
          ],
          "duration": 16424,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Uninstall plugin should uninstall plugin properly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should uninstall plugin properly"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Uninstall plugin"
          ],
          "duration": 2720,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Uninstall plugin should display proper message when no plugin package is provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display proper message when no plugin package is provided"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Uninstall plugin"
          ],
          "duration": 13729,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Uninstall plugin should display proper message when invalid plugin package is provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display proper message when invalid plugin package is provided"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Uninstall plugin",
            "PluginLifecycle"
          ],
          "duration": 20541,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Uninstall plugin PluginLifecycle should fail when a credMgr override plugin has no pluginLifeCycle property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail when a credMgr override plugin has no pluginLifeCycle property"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Uninstall plugin",
            "PluginLifecycle"
          ],
          "duration": 19394,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Uninstall plugin PluginLifecycle should successfully uninstall a credMgr override plugin",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully uninstall a credMgr override plugin"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "List plugin"
          ],
          "duration": 13315,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility List plugin should list all installed plugin",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should list all installed plugin"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "List plugin"
          ],
          "duration": 2275,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility List plugin should display proper message when no plugin is installed",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display proper message when no plugin is installed"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Update plugin"
          ],
          "duration": 18084,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Update plugin should update plugin properly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should update plugin properly"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Update plugin"
          ],
          "duration": 12383,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Update plugin should fail to update a plugin from a file location with a command in it",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail to update a plugin from a file location with a command in it"
        },
        {
          "ancestorTitles": [
            "Plugin Management Facility",
            "Update plugin"
          ],
          "duration": 3063,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Plugin Management Facility Update plugin should display proper message when no plugin package is provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display proper message when no plugin package is provided"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068809739,
        "runtime": 1101,
        "slow": false,
        "start": 1688068808638
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 3,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\profiles\\__integration__\\BasicProfileManager.initialize.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Basic Profile Manager Initialize"
          ],
          "duration": 58,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Basic Profile Manager Initialize Should allow us to initialize the environment and create a profile manager",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "Should allow us to initialize the environment and create a profile manager"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068826417,
        "runtime": 16625,
        "slow": true,
        "start": 1688068809792
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\config\\schema\\cli.imperative-test-cli.config.schema.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli config schema"
          ],
          "duration": 4848,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config schema should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "imperative-test-cli config schema"
          ],
          "duration": 4989,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli config schema should print the generated schema",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should print the generated schema"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068845093,
        "runtime": 18641,
        "slow": true,
        "start": 1688068826452
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\test\\cli.imperative-test-cli.test.config-auto-store.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli test config-auto-store command"
          ],
          "duration": 17799,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test config-auto-store command should store the password automatically",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should store the password automatically"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068846366,
        "runtime": 1229,
        "slow": false,
        "start": 1688068845137
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\packages\\imperative\\__integration__\\ConfigLoading.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Imperative should validate config provided by the consumer"
          ],
          "duration": 186,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Imperative should validate config provided by the consumer We should be able to load our configuration from our package.json",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "We should be able to load our configuration from our package.json"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068873096,
        "runtime": 26700,
        "slow": true,
        "start": 1688068846396
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\example_clis\\with_profiles\\__integration__\\ExampleDefinitions.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "We should provide the ability to define commands through Javascript objects passed through the config or globs that match modules locally, tested through an example CLI"
          ],
          "duration": 25815,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to define commands through Javascript objects passed through the config or globs that match modules locally, tested through an example CLI All commands defined through module globs should be accurately defined, and a definition module in the same directory that does not ",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "All commands defined through module globs should be accurately defined, and a definition module in the same directory that does not "
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068882216,
        "runtime": 9089,
        "slow": true,
        "start": 1688068873127
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\profiles\\cli.imperative-test-cli.profiles.create.secured-profile.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli profiles create secured-profile"
          ],
          "duration": 8164,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli profiles create secured-profile should allow us to create a secured profile, list the contents and the secured fields should be hidden",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow us to create a secured profile, list the contents and the secured fields should be hidden"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 3,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068895649,
        "runtime": 13396,
        "slow": true,
        "start": 1688068882253
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 3,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\hello_world\\__tests__\\HelloWorldCli.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "Hello World"
          ],
          "duration": 4097,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Hello World should print world from the hello command",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should print world from the hello command"
        },
        {
          "ancestorTitles": [
            "Hello World"
          ],
          "duration": 4029,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Hello World should print help if the option is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should print help if the option is specified"
        },
        {
          "ancestorTitles": [
            "Hello World"
          ],
          "duration": 4496,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Hello World should print version if the option is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should print version if the option is specified"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068906008,
        "runtime": 10316,
        "slow": true,
        "start": 1688068895692
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\test\\cli.imperative-test-cli.test.config-override.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli test config-override command"
          ],
          "duration": 9354,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test config-override command should override the password with another property",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should override the password with another property"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068914951,
        "runtime": 8913,
        "slow": true,
        "start": 1688068906038
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\profiles\\Cmd.cli.profiles.create.insecure.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli profiles create insecure"
          ],
          "duration": 8119,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profiles create insecure should create a profile with a field marked as secure in plain text if the cli does not mark keytar as a dependency",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a profile with a field marked as secure in plain text if the cli does not mark keytar as a dependency"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068920395,
        "runtime": 5400,
        "slow": true,
        "start": 1688068914995
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\prompting\\cli.prompting.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli profile mapping"
          ],
          "duration": 4401,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profile mapping should prompt the user for a value when the default prompt phrase is specified",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should prompt the user for a value when the default prompt phrase is specified"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068933872,
        "runtime": 13445,
        "slow": true,
        "start": 1688068920427
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 2,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invoke\\Cmd.cli.invoke.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invoke"
          ],
          "duration": 8174,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        },
        {
          "ancestorTitles": [
            "cmd-cli invoke"
          ],
          "duration": 4405,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke should display help examples for a group",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display help examples for a group"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068943171,
        "runtime": 9254,
        "slow": true,
        "start": 1688068933917
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\read\\Cmd.cli.read.profile.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli profiles read profiles"
          ],
          "duration": 8167,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli profiles read profiles should create a profile with a field marked as secure in plain text (no keytar) and be able to read the contents",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a profile with a field marked as secure in plain text (no keytar) and be able to read the contents"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068952132,
        "runtime": 8935,
        "slow": true,
        "start": 1688068943197
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invalid\\Cmd.cli.invalid.invalid-handler.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invalid no-handler"
          ],
          "duration": 8080,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invalid no-handler should fail the command with a message if the command definition of type command omits a handler",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail the command with a message if the command definition of type command omits a handler"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068957405,
        "runtime": 5243,
        "slow": true,
        "start": 1688068952162
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\nested\\Cmd.cli.nested.first-group.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli nested first-group"
          ],
          "duration": 4328,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli nested first-group should display both groups and commands in the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display both groups and commands in the help"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068962522,
        "runtime": 5090,
        "slow": true,
        "start": 1688068957432
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invalid\\Cmd.cli.invalid.profile-spec.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invalid profile-spec"
          ],
          "duration": 4281,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invalid profile-spec should fail the command if the profile property is not supplied and the handler requests a profile",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail the command if the profile property is not supplied and the handler requests a profile"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068971436,
        "runtime": 8887,
        "slow": true,
        "start": 1688068962549
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\imperative\\__tests__\\__integration__\\cli\\test\\cli.imperative-test-cli.test.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "imperative-test-cli test command"
          ],
          "duration": 8098,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "imperative-test-cli test command should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068976564,
        "runtime": 5100,
        "slow": true,
        "start": 1688068971464
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-wrapped-text.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-wrapped-text"
          ],
          "duration": 4327,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-wrapped-text should produce both wrapped and non-wrapped text",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce both wrapped and non-wrapped text"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068981857,
        "runtime": 5266,
        "slow": true,
        "start": 1688068976591
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.with-syntax-errors.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond with-syntax-errors"
          ],
          "duration": 4288,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond with-syntax-errors should produce a bunch of syntax errors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should produce a bunch of syntax errors"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068991593,
        "runtime": 9703,
        "slow": true,
        "start": 1688068981890
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 2,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invalid\\Cmd.cli.invalid.no-handler.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invalid no-handler"
          ],
          "duration": 8897,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invalid no-handler should fail the command with a message if the command definition of type command omits a handler",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should fail the command with a message if the command definition of type command omits a handler"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688068997577,
        "runtime": 5941,
        "slow": true,
        "start": 1688068991636
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\nested\\Cmd.cli.nested.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli nested"
          ],
          "duration": 4763,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli nested should display both groups and commands in the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display both groups and commands in the help"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688069002718,
        "runtime": 5110,
        "slow": true,
        "start": 1688068997608
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\gen-help\\Cmd.cli.gen-help.allowable-options.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli gen-help allowable-options"
          ],
          "duration": 4299,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli gen-help allowable-options should display the help with allowable options",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help with allowable options"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688069008232,
        "runtime": 5476,
        "slow": true,
        "start": 1688069002756
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\invoke\\Cmd.cli.invoke.exit143.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli invoke exit 143"
          ],
          "duration": 4513,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli invoke exit 143 should allow a handler to set an exit code and throw an error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should allow a handler to set an exit code and throw an error"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688069013921,
        "runtime": 5660,
        "slow": true,
        "start": 1688069008261
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\gen-help\\Cmd.cli.gen-help.example-test.integration.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli gen-help example-test"
          ],
          "duration": 4828,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli gen-help example-test should display the help with allowable options",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help with allowable options"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688069023777,
        "runtime": 9814,
        "slow": true,
        "start": 1688069013963
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 1,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\__integration__\\cmd\\__tests__\\integration\\cli\\respond\\Cmd.cli.respond.test.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "cmd-cli respond"
          ],
          "duration": 8621,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "cmd-cli respond should display the help",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "should display the help"
        }
      ],
      "failureMessage": null
    },
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1688069026723,
        "runtime": 2918,
        "slow": false,
        "start": 1688069023805
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "C:\\ourstuff\\repos\\dev\\imperative\\__tests__\\src\\example_clis\\with_profiles\\__integration__\\ExampleProfiles.spec.ts",
      "testResults": [
        {
          "ancestorTitles": [
            "We should provide the ability to create, manage, and use profiles, tested through an example CLI"
          ],
          "duration": 2183,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "We should provide the ability to create, manage, and use profiles, tested through an example CLI We should be able to get --help for our example CLI",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "passed",
          "title": "We should be able to get --help for our example CLI"
        }
      ],
      "failureMessage": null
    }
  ],
  "wasInterrupted": false,
  "coverageMap": {}
}